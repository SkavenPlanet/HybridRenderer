// Each #kernel tells which function to compile; you can have many kernels

#pragma kernel UpdateProbes UPDATE_IRRADIANCE
#pragma kernel UpdateProbes
#pragma kernel FillBorders

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

#include "Assets/Shaders/DDGI.cginc"
#include "Assets/Shaders/Lighting.cginc"

uniform int _ProbeTexSize, _NumRaysPerProbe, _NumProbes;
RWTexture2D<float4> ProbeOutput;
//Texture2D<float4> RaysDir;
Texture2D<float4> RaysPosition;
Texture2D<float4> RaysIrradiance;
Texture2D<float4> RaysNormal;

//https://github.com/xuechao-chen/DDGI/blob/master/data-files/shaders/IrradianceField_UpdateIrradianceProbe.pix
[numthreads(8, 8, 16)]
void UpdateProbes (uint3 id : SV_DispatchThreadID)
{
	if (id.z >= _NumProbes) return;

	const float hysteresis = 0.97;
	const float energyConservation = 0.95;

	int probeX = id.x;
	int probeY = id.y;
	int probeId = id.z;

	int probeTexSize = _ProbeTexSize;
	int2 probeXY = int2(probeX, probeY);
	int2 probeCoord = probeXY + GetProbeTexOffset(probeId, probeTexSize);

	float3 probeLocation = NewProbePositions[probeId];
	float3 texelDirection = octDecode(octCoord(probeXY, probeTexSize) * 2 - 1);

	const float depthSharpness = 1;
	const float epsilon = 1e-6;
	const float maxDistance = 10;
	float4 result = 0;

	int backfaces = 0;
	int maxBackfaces = _NumRaysPerProbe * 0.1;

	for (int i = 0; i < _NumRaysPerProbe; i++) {
		int2 rayXY = int2(probeId, i);
		float3 rayHitLocation = RaysPosition[rayXY].xyz;
		float3 rayIrradiance = RaysIrradiance[rayXY].rgb * energyConservation;
		float3 rayDirection = normalize(rayHitLocation - probeLocation);
		float backface = RaysNormal[rayXY].a;
		float3 rayHitNormal = RaysNormal[rayXY].xyz;

		//dont blend backface samples
		if (backface > 0) {
			backfaces++;
			if (backfaces >= maxBackfaces) return;
			continue;
		}

		float rayLength = min(maxDistance, length(probeLocation - rayHitLocation));

#ifdef UPDATE_IRRADIANCE
		float weight = max(0, dot(texelDirection, rayDirection));
#else
		float weight = pow(max(0, dot(texelDirection, rayDirection)), depthSharpness);
#endif

		if (weight >= epsilon) {
#ifdef UPDATE_IRRADIANCE
			result += float4(rayIrradiance, 1) * weight;
#else
			result += float4(rayLength, rayLength * rayLength, 0, 1) * weight;
#endif
		}
	}

	if (result.w > epsilon) {
		result.xyz /= result.w;
	}
	ProbeOutput[probeCoord] = result;// ProbeOutput[probeCoord] * hysteresis + result * (1 - hysteresis);

}

[numthreads(8, 8, 16)]
void FillBorders(uint3 id : SV_DispatchThreadID) {

	if (id.z >= _NumProbes) return;

	int probeX = id.x;
	int probeY = id.y;
	//SceneNode node = Scene_SVO[LeafNodeIndices[id.z]];
	int probeId = id.z;// node.indices[0];
	int probeTexSize = _ProbeTexSize;
	int2 probeXY = int2(probeX, probeY);
	int2 probeStart = GetProbeTexOffset(probeId, probeTexSize);

	bool bottomRow = probeY == 0;
	bool topRow = probeY == probeTexSize - 1;
	bool leftColumn = probeX == 0;
	bool rightColumn = probeX == probeTexSize - 1;
	bool borderPixel = (bottomRow || topRow || leftColumn || rightColumn);
	if (!borderPixel) return;

	//corner
	//if ((bottomRow || topRow) && (leftColumn || rightColumn)) return;

	bool corner = ((bottomRow || topRow) && (leftColumn || rightColumn));

	int2 offset = 0;
	if (corner) {
		if (bottomRow && leftColumn) {
			offset = int2(probeTexSize - 2, probeTexSize - 2);
		}
		if (topRow && leftColumn) {
			offset = int2(probeTexSize - 2, 1);
		}
		if (bottomRow && rightColumn) {
			offset = int2(1, probeTexSize - 2);
		}
		if (topRow && rightColumn) {
			offset = int2(1, 1);
		}
	}
	else {
		if (bottomRow) {
			offset = int2(probeTexSize - probeX - 1, 1);
		}
		if (topRow) {
			offset = int2(probeTexSize - probeX - 1, probeY - 1);
		}
		if (leftColumn) {
			offset = int2(1, probeTexSize - probeY - 1);
		}
		if (rightColumn) {
			offset = int2(probeX - 1, probeTexSize - probeY - 1);
		}
	}
	ProbeOutput[probeStart + probeXY] = ProbeOutput[probeStart + offset];
}
